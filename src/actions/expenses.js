import uuid from 'uuid'
import database from '../firebase/firebase'; 
// Basic steps for Action generators -- [1] component calls action generator;  [2] action generator returns object;  
    // [3] component dispatches object;  [4] redux store changes

// Basic steps for Action generators using Redux -- [1] component calls action generator;  [2] action generator returns FUNCTION;  
    // [3] component dispatches function;  [4] function runs (has the ability to dispatch other actions & do whatever it wants);  
    // Note:  Redux by default doesn't let you dispatch functions;  need to add middleware for this to work;  

// ADD_EXPENSE action generator
export const addExpense = (expense) => ({    // destructuring the args; default vals; {} if no object
    type: 'ADD_EXPENSE', 
    expense
});

// this returns what gets dispatched (usually an object, but returning a function here)
export const startAddExpense = (expenseData = {}) => {  // default to {} if expenseData not received
    // return gets called by Redux;  dispatch var allows us to use dispatch in the function 
    return (dispatch) => {      // this function only works because we setup the middleware using redux in configureStore.js
        const {     // destructure key properties from expenseData, could have also done this in the args list 
            description='', 
            note='', 
            amount=0, 
            createdAt = 0
        } = expenseData; 
        // we are writing data to Firebase via .push, waiting for that data to sync, & then writing to dispatch (to update Redux)  
        const expense = { description, note, amount, createdAt }; 
        return database.ref('expenses').push(expense).then((ref) => {      // .then gets called with reference that we can access via ref
            dispatch(addExpense({    // dispatch needed or redux store will never change;  redux changes show on website
                id: ref.key,    // id generated by Firebase & can be accessed via ref.key
                ...expense
            }));   
        })  // by returning promise chain here will allow us to add a .then() on where this is received (e.g. in expenses.test.js);  
    }; 
}

// REMOVE_EXPENSE action generator
export const removeExpense = ( {id } = {} ) => ({    // destructuring the args; default vals; {} if no object;  implicity returns object via {{...})
    type: 'REMOVE_EXPENSE', 
    id
});

// EDIT_EXPENSE action generator
export const editExpense = (id, updates) => ({
    type: 'EDIT_EXPENSE', 
    id, 
    updates
})