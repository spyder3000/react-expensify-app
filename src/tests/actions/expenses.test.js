import configureMockStore from 'redux-mock-store'; 
import thunk from 'redux-thunk'; 
import { startAddExpense, addExpense, editExpense, removeExpense } from '../../actions/expenses'; 
import expenses from '../fixtures/expenses';
import database from '../../firebase/firebase'; 

// create configuration for creating mock Store;  params are array of middleware
const createMockStore = configureMockStore([thunk])


test('Setup Remove Expense action object', () => {
    const action = removeExpense({id: '1234abc'}); 
    //expect(action).toBe({       // .toBe() is equivalent of === so compare of objects & compare of arrays will fail
    expect(action).toEqual({        // use .toEqual() for objects or arrays, so it will compare each element contained in those
        type: 'REMOVE_EXPENSE', 
        id: '1234abc'
    })
})

test('Setup Edit Expense action object', () => {
    const action = editExpense('1234abc', {note: 'new note value'}); 
    //expect(action).toBe({       // .toBe() is equivalent of === so compare of objects & compare of arrays will fail
    expect(action).toEqual({        // use .toEqual() for objects or arrays, so it will compare each element contained in those
        type: 'EDIT_EXPENSE', 
        id: '1234abc', 
        updates: {note: 'new note value'}
    })
})

test('Setup Add Expense action object with provided values', () => {
    const action = addExpense(expenses[2]); 
    expect(action).toEqual({        // id field is unknown as this is generated each time;  use .any(String) for this field
        type: 'ADD_EXPENSE', 
        expense: expenses[2]
    })
})

test('Should add Expense to database and (dispatch to) store', (done) => {  // done used to force async wait in test below
    const store = createMockStore({}); 
    const expenseData = {
        description: 'Mouse', 
        amount: 3000, 
        note: 'This one is better', 
        createdAt: 1000
    }
    // Use Promise chaining -- e.g. promise.then(() => {...}).then(() => {...}).then ...
    store.dispatch(startAddExpense(expenseData)).then(() => {
        // expect(1).toBe(2);   // w/out done, passes the test because Jest is already finished with initial function call 
        // done();  // forces Jest to wait for Firebase to complete, & expect(1).toBe(2) will fail
        const actions = store.getActions(); 
        expect(actions[0]).toEqual({    // first action is the only one that should exist (dispatch on expenses.js is only action here)
            type: 'ADD_EXPENSE',        
            expense: {
                id: expect.any(String),     // just checking that id is a string of some kind
                ...expenseData
            }
        })

        // expense.id is the id generated by Firebase;   
        database.ref(`expenses/${actions[0].expense.id}`).once('value')
    }).then((snapshot) => {
        expect(snapshot.val()).toEqual(expenseData); 
        done();  // this is async as well, so move done() here to forces Jest to wait for this to complete
    }) 
})

test('Should add Expense with defaults to database and (dispatch to) store', (done) => {
    const store = createMockStore({}); 
    const expenseDefaults = {
        description: '', 
        amount: 0, 
        note: '', 
        createdAt: 0
    }
    // Use Promise chaining -- e.g. promise.then(() => {...}).then(() => {...}).then ...
    store.dispatch(startAddExpense({})).then(() => {
        // expect(1).toBe(2);   // w/out done, passes the test because Jest is already finished with initial function call 
        // done();  // forces Jest to wait for Firebase to complete, & expect(1).toBe(2) will fail
        const actions = store.getActions(); 
        expect(actions[0]).toEqual({    // first action is the only one that should exist (dispatch on expenses.js is only action here)
            type: 'ADD_EXPENSE',        
            expense: {
                id: expect.any(String),     // just checking that id is a string of some kind
                ...expenseDefaults
            }
        })

        // expense.id is the id generated by Firebase;   
        database.ref(`expenses/${actions[0].expense.id}`).once('value')
    }).then((snapshot) => {
        expect(snapshot.val()).toEqual(expenseDefaults); 
        done();  // this is async as well, so move done() here to forces Jest to wait for this to complete
    }) 
})

// test('Setup Add Expense with no data', () => {
//     const action = addExpense(); 
//     expect(action).toEqual({        // id field is unknown as this is generated each time;  use .any(String) for this field
//         type: 'ADD_EXPENSE', 
//         expense: {
//             description: '', 
//             note: '', 
//             amount: 0, 
//             createdAt: 0, 
//             id: expect.any(String)
//         }
//     })
// })